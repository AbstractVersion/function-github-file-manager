#!/usr/bin/env python3
"""Quick authentication test for GitHub File Manager Function."""

import logging
import sys
import traceback
from function.fn import GitHubFileManager

# Setup logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def test_github_app_auth():
    """Test GitHub App authentication step by step."""
    
    print("🔧 Testing GitHub App Authentication...")
    
    # Replace with your actual GitHub App credentials
    github_app = {
        "appId": "YOUR_APP_ID",          # e.g., "123456"
        "installationId": "YOUR_INST_ID", # e.g., "78901234"
        "privateKey": """-----BEGIN RSA PRIVATE KEY-----
YOUR_PRIVATE_KEY_HERE
-----END RSA PRIVATE KEY-----"""
    }
    
    try:
        # Initialize manager
        manager = GitHubFileManager(
            logger=logger,
            github_app=github_app
        )
        print("✅ GitHubFileManager initialized successfully")
        
        # Test JWT generation
        print("\n🔑 Testing JWT token generation...")
        jwt_token = manager._generate_jwt_token()
        print(f"✅ JWT Token generated: {jwt_token[:50]}...")
        
        # Test installation access token
        print("\n🎫 Testing installation access token...")
        access_token = manager._get_installation_access_token()
        print(f"✅ Access token obtained: {access_token[:20]}...")
        
        # Test auth headers
        print("\n📋 Testing auth headers...")
        headers = manager._get_auth_headers()
        print(f"✅ Auth headers: {headers}")
        
        return True
        
    except Exception as e:
        print(f"❌ Authentication failed: {e}")
        traceback.print_exc()
        return False

def test_personal_token_auth():
    """Test Personal Access Token authentication."""
    
    print("\n🔧 Testing Personal Access Token...")
    
    # Replace with your actual token
    github_token = "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    
    try:
        manager = GitHubFileManager(
            logger=logger,
            github_token=github_token
        )
        print("✅ GitHubFileManager initialized successfully")
        
        # Test auth headers
        headers = manager._get_auth_headers()
        print(f"✅ Auth headers: {headers}")
        
        return True
        
    except Exception as e:
        print(f"❌ Token authentication failed: {e}")
        return False

def test_file_commit(manager, test_repo="your-org/test-repo"):
    """Test actual file commit to GitHub."""
    
    try:
        print(f"\n📁 Testing file commit to {test_repo}...")
        
        import datetime
        content = f"""# Test File
Generated by GitHub File Manager Function
Timestamp: {datetime.datetime.now()}
"""
        
        result = manager.commit_file(
            repository=test_repo,
            path="test/crossplane-function-test.txt",
            content=content,
            message="Test commit from Crossplane function",
            branch="main"
        )
        
        print(f"✅ File committed successfully: {result}")
        return True
        
    except Exception as e:
        print(f"❌ File commit failed: {e}")
        return False

if __name__ == "__main__":
    print("🚀 GitHub File Manager Function - Authentication Test\n")
    
    # Test GitHub App auth
    app_success = test_github_app_auth()
    
    # Test Personal Access Token auth  
    token_success = test_personal_token_auth()
    
    print(f"\n📊 Results:")
    print(f"   GitHub App Auth: {'✅ PASS' if app_success else '❌ FAIL'}")
    print(f"   Personal Token Auth: {'✅ PASS' if token_success else '❌ FAIL'}")
    
    print(f"\n💡 Instructions:")
    print(f"   1. Replace YOUR_APP_ID, YOUR_INST_ID, and private key in the script")
    print(f"   2. Replace the GitHub token with your actual token") 
    print(f"   3. Run: python test_auth.py")
    print(f"   4. See LOCAL_TESTING.md for detailed debugging guide") 